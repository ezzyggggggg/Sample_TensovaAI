BACK END .net API

1. 
# config.py

import os

basedir = os.path.abspath(os.path.dirname(__file__))

class Config:
    SQLALCHEMY_DATABASE_URI = 'sqlite:///' + os.path.join(basedir, 'app.db')
    SQLALCHEMY_TRACK_MODIFICATIONS = False

# models.py

from flask_sqlalchemy import SQLAlchemy

db = SQLAlchemy()

class Patient(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    firstname = db.Column(db.String(50), nullable=False)
    lastname = db.Column(db.String(50), nullable=False)
    city = db.Column(db.String(50), nullable=False)
    active = db.Column(db.Boolean, default=True)
    
    def to_dict(self):
        return {
            'id': self.id,
            'firstname': self.firstname,
            'lastname': self.lastname,
            'city': self.city,
            'active': self.active
        }

# app.py

from flask import Flask, request, jsonify, abort
from config import Config
from models import db, Patient

app = Flask(__name__)
app.config.from_object(Config)
db.init_app(app)

@app.before_first_request
def create_tables():
    db.create_all()

@app.route('/patients', methods=['POST'])
def create_patient():
    data = request.get_json()
    if not data or not all(k in data for k in ('firstname', 'lastname', 'city', 'active')):
        abort(400)
    patient = Patient(
        firstname=data['firstname'],
        lastname=data['lastname'],
        city=data['city'],
        active=data['active']
    )
    db.session.add(patient)
    db.session.commit()
    return jsonify(patient.to_dict()), 201

@app.route('/patients', methods=['GET'])
def get_patients():
    patients = Patient.query.all()
    return jsonify([patient.to_dict() for patient in patients])

@app.route('/patients/<int:id>', methods=['GET'])
def get_patient(id):
    patient = Patient.query.get_or_404(id)
    return jsonify(patient.to_dict())

@app.route('/patients/<int:id>', methods=['PUT'])
def update_patient(id):
    patient = Patient.query.get_or_404(id)
    data = request.get_json()
    if not data:
        abort(400)
    patient.firstname = data.get('firstname', patient.firstname)
    patient.lastname = data.get('lastname', patient.lastname)
    patient.city = data.get('city', patient.city)
    patient.active = data.get('active', patient.active)
    db.session.commit()
    return jsonify(patient.to_dict())

@app.route('/patients/<int:id>', methods=['DELETE'])
def delete_patient(id):
    patient = Patient.query.get_or_404(id)
    db.session.delete(patient)
    db.session.commit()
    return '', 204

if __name__ == '__main__':
    app.run(debug=True)

>Run python app.py

http://127.0.0.1:5000

POST /patients: Create a new patient.
GET /patients: Retrieve all patients.
GET /patients/<int:id>: Retrieve a specific patient by ID.
PUT /patients/<int:id>: Update a specific patient by ID.
DELETE /patients/<int:id>: Delete a specific patient by ID.

'POST' http://127.0.0.1:5000/patients

{
    "firstname": "John",
    "lastname": "Doe",
    "city": "New York",
    "active": true
}

'GET' http://127.0.0.1:5000/patients

2.

# Create a new in-memory database
conn = sqlite3.connect(':memory:')
cursor = conn.cursor()

# Create a sample table
cursor.execute('''
CREATE TABLE users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    name TEXT NOT NULL,
    email TEXT NOT NULL UNIQUE
)
''')

# Insert initial data
initial_data = [
    ('Alice', 'alice@example.com'),
    ('Bob', 'bob@example.com'),
    ('Charlie', 'charlie@example.com')
]

cursor.executemany('INSERT INTO users (name, email) VALUES (?, ?)', initial_data)

# Commit changes (although not strictly necessary for in-memory databases)
conn.commit()

# Fetch and display data to confirm
cursor.execute('SELECT * FROM users')
rows = cursor.fetchall()
for row in rows:
    print(row)

# Perform various operations on the database
# Inserting new data
cursor.execute('INSERT INTO users (name, email) VALUES (?, ?)', ('David', 'david@example.com'))

# Fetch and display data to confirm
cursor.execute('SELECT * FROM users')
rows = cursor.fetchall()
for row in rows:
    print(row)

# Close the connection when done
conn.close()

3.

mkdir backend-api
cd backend-api
npm init -y
npm install express mongoose body-parser

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;
const DB_URL = 'mongodb://localhost:27017/mydatabase'; // replace with your MongoDB connection string

mongoose.connect(DB_URL, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err));

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

Item.js

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

const ItemSchema = new Schema({
    name: {
        type: String,
        required: true
    },
    description: {
        type: String
    },
    price: {
        type: Number,
        required: true
    },
    createdAt: {
        type: Date,
        default: Date.now
    }
});

module.exports = mongoose.model('Item', ItemSchema);

server.js

const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const itemsRoute = require('./routes/items');

const app = express();
app.use(bodyParser.json());

const PORT = process.env.PORT || 3000;
const DB_URL = 'mongodb://localhost:27017/mydatabase'; // replace with your MongoDB connection string

mongoose.connect(DB_URL, { useNewUrlParser: true, useUnifiedTopology: true })
    .then(() => console.log('MongoDB connected'))
    .catch(err => console.log(err));

app.use('/api/items', itemsRoute);

app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});

Start the server > node server.js
